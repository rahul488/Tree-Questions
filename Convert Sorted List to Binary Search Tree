/*

Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

Example:

Given the sorted linked list: [-10,-3,0,5,9],

One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:

      0
     / \
   -3   9
   /   /
 -10  5
 
 */
 
 /**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode sortedListToBST(ListNode head) {
        
        if(head == null)
            return null;
        List<Integer> al=new ArrayList<>();
        
        while(head!=null)
        {
            al.add(head.val);
            head=head.next;
        }
        TreeNode root=null;
        root=constructTree(al,0,al.size()-1);
        return root;
    }
    public TreeNode constructTree(List<Integer> list,int strt,int end)
    {
        if(strt > end)
            return null;
        int mid=(strt+end)/2;
        TreeNode root=new TreeNode(list.get(mid));
        root.left=constructTree(list,strt,mid-1);
        root.right=constructTree(list,mid+1,end);
        
        return root;
    }
}
