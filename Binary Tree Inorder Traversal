/*

Given a binary tree, return the inorder traversal of its nodes' values.

Example:

Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [1,3,2]


*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 
 Iterative Method
 --------------------------------
class Solution {
  
    public List<Integer> inorderTraversal(TreeNode root) {
      List<Integer> res=new ArrayList<>();
        if(root == null)
            return res;
        Stack<TreeNode> st=new Stack<>();
       
        while(!st.isEmpty() || root!=null)
        {
            
            while(root!=null)
            {
                st.push(root);
                root=root.left;
            }
            root=st.pop();
            res.add(root.val);
            root=root.right;
        }
        return res;
    } 
}

Recursive Method
-----------------------------

class Solution {
  
    public List<Integer> inorderTraversal(TreeNode root) {
      List<Integer> res=new ArrayList<>();
        if(root == null)
            return res;
         traverse(root,res);
        return res;
    }
    public void traverse(TreeNode root,List<Integer> res)
    {
        if(root!=null)
        {
            traverse(root.left,res);
            res.add(root.val);
            traverse(root.right,res);
        }
    }
}
