/*

Given a binary tree, return the preorder traversal of its nodes' values.

Example:

Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [1,2,3]
Follow up: Recursive solution is trivial, could you do it iteratively?

*/
--------------------------------
Recursive Method              |
---------------------------------

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
     List<Integer> res=new ArrayList<>();
    public List<Integer> preorderTraversal(TreeNode root) {
        
     if(root!=null)
     {
         res.add(root.val);
         preorderTraversal(root.left);
         preorderTraversal(root.right);
     }
     return res;
        
    }
}


-------------------------------
Iterative Method              |
-------------------------------
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
   
    public List<Integer> preorderTraversal(TreeNode root) {
     List<Integer> res=new ArrayList<>();
        
    if(root == null)
        return res;
        
        Stack<TreeNode> st=new Stack<>();
        st.push(root);
        
        while(!st.isEmpty())
        {
            TreeNode temp=st.peek();
            res.add(temp.val);
            root=st.pop();
            if(root.right!=null)
                st.push(root.right);
            if(root.left!=null)
                st.push(root.left);
        }
  
        return res;
    }
}

