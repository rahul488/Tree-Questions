/***
Given a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.

Example:

Input: [1,2,3,null,5,null,4]
Output: [1, 3, 4]
Explanation:

   1            <---
 /   \
2     3         <---
 \     \
  5     4       <---
  
***/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<Integer> res=new ArrayList<>();
    public List<Integer> rightSideView(TreeNode root) {
        
        if(root == null)
            return res;
        Bfs(root);
        return res;
    }
    public void Bfs(TreeNode root)
    {
        Queue<TreeNode> q=new LinkedList<>();
        
        q.add(root);
        
        while(!q.isEmpty())
        {
           int size=q.size();
           for(int i=0;i<size;i++)
           {   
               root=q.poll();
               if(root.left!=null)
                {
                q.add(root.left);
                }
                if(root.right!=null)
                {
                q.add(root.right);
                }
                if(i==size-1)
                {
                    res.add(root.val);
                }
           } 
        }
    }
}
