/*
Given an integer n, generate all structurally unique BST's (binary search trees) that store values 1 ... n.

Example:

Input: 3
Output:
[
  [1,null,3,2],
  [3,2,null,1],
  [3,1,null,null,2],
  [2,1,3],
  [1,null,2,null,3]
]

  1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3
   
   
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
   
    public List<TreeNode> generateTrees(int n) {
        List<TreeNode> res=new ArrayList<>();
        if(n <= 0)
        {
            return res;
        }
        res=findSoln(1,n);
        return res;
    }
    public List<TreeNode> findSoln(int start,int end)
    {
        ArrayList<TreeNode> list=new ArrayList<>();
        
        if(start > end)
        {
            list.add(null);
            return list;
        }
        for(int i=start;i<=end;i++)
        {
            List<TreeNode> left=findSoln(start,i-1);
            List<TreeNode> right=findSoln(i+1,end);
            
            for(int j=0;j<left.size();j++)
            {
                TreeNode leftSubTree=left.get(j);
                for(int k=0;k<right.size();k++)
                {
                    TreeNode rightSubTree=right.get(k);
                    
                    TreeNode root=new TreeNode(i);
                    root.left=leftSubTree;
                    root.right=rightSubTree;
                    list.add(root);
                }
            }
        }
          return list;
            
    }
}
