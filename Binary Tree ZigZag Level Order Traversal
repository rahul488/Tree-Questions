/*

Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its zigzag level order traversal as:
[
  [3],
  [20,9],
  [15,7]
]

*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        
        List<List<Integer>> res=new ArrayList<>();
        if(root == null)
            return res;
        HashMap<Integer,List<Integer>> hs=new LinkedHashMap<>();
        int height=getHeight(root);
        
        for(int i=0;i<height;i++)
        {
            printValues(root,i,i,hs);
        }
        for(List<Integer> list:hs.values())
        {
            res.add(list);
        }
        return res;
    }
    public void printValues(TreeNode root,int i,int track,HashMap<Integer,List<Integer>> hs)
    {
        if(root == null)
            return;
        if(track == 0)
        {
            if(!hs.containsKey(i))
            {
                List<Integer> list=new ArrayList<>();
                hs.put(i,list);
            }
            hs.get(i).add(root.val);
            return ;
        }
        if(i % 2 == 0)
        {
            printValues(root.left,i,track-1,hs);
            printValues(root.right,i,track-1,hs);
        }
        else
        {
            printValues(root.right,i,track-1,hs);
            printValues(root.left,i,track-1,hs);
        }
    }
    public int getHeight(TreeNode root)
    {
        if(root == null)
            return 0;
        int leftHeight=getHeight(root.left);
        int rightHeight=getHeight(root.right);
        
        return (leftHeight > rightHeight)?leftHeight+1:rightHeight+1;
    }
}
