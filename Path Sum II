/*


Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.

Note: A leaf is a node with no children.

Example:

Given the below binary tree and sum = 22,

      5
     / \
    4   8
   /   / \
  11  13  4
 /  \    / \
7    2  5   1
Return:

[
   [5,4,11,2],
   [5,8,4,5]
]

*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<List<Integer>> res;
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        res=new ArrayList<>();
        
        storePath(root,sum,new ArrayList<Integer>());
        return res;
    }
    public void storePath(TreeNode root,int sum,List<Integer> list)
    {
        if(root == null)
            return;
        
        list.add(root.val);
    
        if(root.left == null && root.right== null && root.val == sum)
        {
            
            res.add(new ArrayList<Integer>(list));
            list.remove(list.size()-1);
            return;
        }
        else
        {
            storePath(root.left,sum-root.val,list);
            storePath(root.right,sum-root.val,list);
        }
        list.remove(list.size()-1);
    }
}
